name: Python Tests

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/**'
      - 'tests/**'
      - 'pytest.ini'
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/**'
      - 'tests/**'
      - 'pytest.ini'
  workflow_dispatch:  # Allows manual triggering

# Strict concurrency control
concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    env:
      BASE_DIR: ${{ github.workspace }}/test_data
      YOUTUBE_API_KEY: test_api_key_123
      DOWNLOAD_DIR: ${{ github.workspace }}/test_data/downloads
      TRANSCRIPT_DIR: ${{ github.workspace }}/test_data/transcripts
      MAX_RESULTS: 50
      GOOGLE_APPLICATION_CREDENTIALS: credentials.json
      PYTHONPATH: ${{ github.workspace }}
      PYTEST_CURRENT_TEST: true
    
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html pytest-cov pytest-asyncio
        pip install yt-dlp
        pip install -e .
        
    - name: Set up test environment
      run: |
        # Create test directories
        mkdir -p "$BASE_DIR"
        mkdir -p "$DOWNLOAD_DIR"
        mkdir -p "$TRANSCRIPT_DIR"
        mkdir -p test_results/coverage
        chmod -R 777 "$BASE_DIR"
        
        # Print environment for debugging
        echo "Current environment:"
        echo "BASE_DIR: $BASE_DIR"
        echo "DOWNLOAD_DIR: $DOWNLOAD_DIR"
        echo "TRANSCRIPT_DIR: $TRANSCRIPT_DIR"
        echo "PYTHONPATH: $PYTHONPATH"
        
    - name: Run tests and generate reports
      run: |
        # Print test environment
        echo "Current directory: $(pwd)"
        echo "Test environment variables:"
        env | grep -E 'BASE_DIR|YOUTUBE|DOWNLOAD|TRANSCRIPT|MAX_RESULTS'
        
        # Run tests with pytest (using pytest.ini configuration)
        python -m pytest
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          test_results/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.repository == 'satishbagali/youtube-video-downloader'
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./test_results/coverage.xml
        fail_ci_if_error: false 