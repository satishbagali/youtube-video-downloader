name: Python Tests

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/**'
      - 'tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/**'
      - 'tests/**'
  workflow_dispatch:  # Allows manual triggering

# Strict concurrency control
concurrency:
  # Use different group names for PR vs push
  group: ${{ github.repository }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    # Only run on push to main, workflow_dispatch, or PR from forks
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      # Prevent all matrix jobs from failing if one fails
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html pytest-cov pytest-asyncio
        pip install yt-dlp
        pip install -e .
        
    - name: Set up test environment
      run: |
        # Create test directories with full permissions
        TEST_BASE_DIR="${{ github.workspace }}/test_data"
        mkdir -p "$TEST_BASE_DIR"
        mkdir -p "$TEST_BASE_DIR/downloads"
        mkdir -p "$TEST_BASE_DIR/transcripts"
        chmod -R 777 "$TEST_BASE_DIR"
        
        # Export environment variables
        echo "BASE_DIR=$TEST_BASE_DIR" >> $GITHUB_ENV
        echo "DOWNLOAD_DIR=$TEST_BASE_DIR/downloads" >> $GITHUB_ENV
        echo "TRANSCRIPT_DIR=$TEST_BASE_DIR/transcripts" >> $GITHUB_ENV
        echo "YOUTUBE_API_KEY=dummy_key" >> $GITHUB_ENV
        
        # Create .env file for tests that load from it
        echo "BASE_DIR=$TEST_BASE_DIR" > .env
        echo "DOWNLOAD_DIR=$TEST_BASE_DIR/downloads" >> .env
        echo "TRANSCRIPT_DIR=$TEST_BASE_DIR/transcripts" >> .env
        echo "YOUTUBE_API_KEY=dummy_key" >> .env
        
        # Debug output
        echo "Created test directories:"
        ls -la "$TEST_BASE_DIR"
        echo "Environment file contents:"
        cat .env
        
    - name: Run tests and generate reports
      env:
        YOUTUBE_API_KEY: dummy_key
        BASE_DIR: ${{ github.workspace }}/test_data
        DOWNLOAD_DIR: ${{ github.workspace }}/test_data/downloads
        TRANSCRIPT_DIR: ${{ github.workspace }}/test_data/transcripts
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Print environment for debugging
        echo "Current environment:"
        env | grep -E 'BASE_DIR|DOWNLOAD_DIR|TRANSCRIPT_DIR|YOUTUBE_API_KEY'
        echo "Current directory: $(pwd)"
        echo "Test data directory contents:"
        ls -la ${{ github.workspace }}/test_data
        
        # Run tests with pytest
        pytest tests/ -v --cov=src/ --cov-report=html --cov-report=term-missing
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: test-results-${{ github.sha }}
        path: |
          test_results/
          htmlcov/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.repository == 'satishbagali/youtube-video-downloader'  # Only run on main repo
      continue-on-error: true  # Don't fail the workflow if coverage upload fails
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false  # Don't fail if coverage upload fails 